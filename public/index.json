[
{
	"uri": "https://ecsworkshop.com/platform/infrastructure.html",
	"title": "Build the Platform",
	"tags": [],
	"description": "",
	"content": "If breaking down a monolith into microservices is a good idea, then it stands to reason that keeping the code that manages your app platform small and simple also makes sense.\nIn this workshop, we manage the infrastructure with this repository, and then each service will be maintained in it\u0026rsquo;s own separate repository.\nThis repository will generate CloudFormation Stacks that will build 2 independent environments called Acceptance and Production\nThese environments include:\n VPC  3 public subnets 3 private subnets routing tables nat gateway  ALB  Public ALB for external traffic Private ALB for backend traffic Security groups for each ALB Custom Route53 DNS zone \u0026ldquo;internal.service\u0026rdquo; Custom Route53 DNS record \u0026ldquo;api.internal.service\u0026rdquo; aliased to the backend ALB Custom Route53 DNS record \u0026ldquo;api.internal.service\u0026rdquo; aliased to the backend ALB  ECS Cluster  Instance security group Host to host ingress/egress rules IAM Role for autoscaling  CodePipeline to manage infrastructure code changes  CI/CD for infrastructure changes   "
},
{
	"uri": "https://ecsworkshop.com/prerequisites/workspace.html",
	"title": "Create a Workspace",
	"tags": [],
	"description": "",
	"content": " Create a Cloud9 Environment  select Create environment  Name it Workshop, and take all other defaults When it comes up, customize the environment by closing the welcome and immediate tabs, and pulling the terminal tab up to the main work area. After that I close the bottom work area.  "
},
{
	"uri": "https://ecsworkshop.com/crystal/mu.html",
	"title": "Crystal Backend Service",
	"tags": [],
	"description": "",
	"content": "For this backend api service, we want to use our backend ALB so that this API is only reachable from inside our VPC. Check out mu.yml and notice how we\u0026rsquo;ve overridden a couple of the default CloudFormation parameters to point to the backend ALB:\n--- service: desiredCount: 3 maxSize: 6 port: 3000 priority: 2 pathPatterns: - /crystal networkMode: awsvpc parameters: 'mu-service-ecsdemo-crystal-acceptance': ElbHttpListenerArn: mu-loadbalancer-acceptance-BackendLBHttpListenerArn 'mu-service-ecsdemo-crystal-production': ElbHttpListenerArn: mu-loadbalancer-production-BackendLBHttpListenerArn  Notice, our pathPatterns for route matching is set specifically to /crystal and we\u0026rsquo;ve set a high priority. This will carve off any traffic to this ALB that starts with /crystal/ and route that traffic to this service, rather than the default Node.js service.\n"
},
{
	"uri": "https://ecsworkshop.com/frontend/mu.html",
	"title": "Frontend Service",
	"tags": [],
	"description": "",
	"content": "Opinionated tooling is designed to guide you down a path that is considered a \u0026ldquo;best practice\u0026rdquo;. Additionally, since \u0026ldquo;best practice\u0026rdquo; is the default, the amount of code we maintain is dramatically reduced. Rather than writing hundreds of lines of CloudFormation ourselves, we can start with a smart set of defaults, and just fill in a few blanks, and customize only the parts that we want changed.\nWhen a service team wants to build a new service, they can include their own mu.yml\n--- service: desiredCount: 3 maxSize: 6 port: 3000 pathPatterns: - /* networkMode: awsvpc environment: BACKEND_API: \u0026quot;http://api.internal.service:80\u0026quot;  In this file, we define the service and how it should run. We want a minimum of 3 containers of our service running, for redundancy. These will automatically be spread across our 3 availability zones.\nAutoscaling will be configured with a maximum of 6 containers.\nThe containers listen on port 3000, and ALB should be configured to route all paths to these containers.\nWe\u0026rsquo;re using awsvpc networking mode, so each container will get it\u0026rsquo;s own ENI.\nWhen each container is launched, it will have a custom environment variable set so the application knows the URL of the backend api.\n"
},
{
	"uri": "https://ecsworkshop.com/nodejs/mu.html",
	"title": "Node.js Backend Service",
	"tags": [],
	"description": "",
	"content": "For this backend api service, we want to use our backend ALB so that this API is only reachable from inside our VPC. Check out mu.yml and notice how we\u0026rsquo;ve overridden a couple of the default CloudFormation parameters to point to the backend ALB:\n--- service: desiredCount: 3 maxSize: 6 port: 3000 priority: 50 pathPatterns: - /* networkMode: awsvpc parameters: 'mu-service-ecsdemo-nodejs-acceptance': ElbHttpListenerArn: mu-loadbalancer-acceptance-BackendLBHttpListenerArn 'mu-service-ecsdemo-nodejs-production': ElbHttpListenerArn: mu-loadbalancer-production-BackendLBHttpListenerArn  Also, our pathPatterns for route matching is still going to match everything (like in our frontend ALB settings), but we\u0026rsquo;ve set a very low priority. This allows us to continue adding higher priority backend APIs, carving off specific routes. This API will be our default catch-all api.\n"
},
{
	"uri": "https://ecsworkshop.com/prerequisites.html",
	"title": "Prerequisites",
	"tags": [],
	"description": "",
	"content": " Prerequisites for the Workshop  Create a workspace for the Workshop Create a SSH key for the workshop Create a GitHub token for the workshop Install Mu Fork the GitHub repos to your own GitHub account Clone your forked repos via SSH  "
},
{
	"uri": "https://ecsworkshop.com/prerequisites/sshkey.html",
	"title": "Create a SSH key",
	"tags": [],
	"description": "",
	"content": " Create a ssh key and add it to your GitHub account.\nssh-keygen   Press enter 4 times to take the default choices  copy the public key to your clipboard\ncat ~/.ssh/id_rsa.pub   Go to https://github.com/settings/ssh/new and paste your key in the box marked \u0026ldquo;key\u0026rdquo;  Type Workshop Cloud9 in the title, and select Add SSH key\n You should be prompted to confirm your password   "
},
{
	"uri": "https://ecsworkshop.com/crystal/backend.html",
	"title": "Deploy the Backend Pipeline",
	"tags": [],
	"description": "",
	"content": "Let’s bring up the Crystal Backend API!\nCopy/Paste the following commands into your Cloud9 workspace:\ncd ~/environment/ecsdemo-crystal  mu pipeline up   paste your personal GitHub token This will take 5 minutes  After the pipeline is built, monitor it\u0026rsquo;s progress:\nmu pipeline logs acceptance -f  "
},
{
	"uri": "https://ecsworkshop.com/nodejs/backend.html",
	"title": "Deploy the Backend Pipeline",
	"tags": [],
	"description": "",
	"content": "Let’s bring up the Node.js Backend API!\nCopy/Paste the following commands into your Cloud9 workspace:\ncd ~/environment/ecsdemo-nodejs  mu pipeline up   paste your personal GitHub token This will take 5 minutes  After the pipeline is built, monitor it\u0026rsquo;s progress:\nmu pipeline logs acceptance -f  "
},
{
	"uri": "https://ecsworkshop.com/frontend/frontend.html",
	"title": "Deploy the Frontend Pipeline",
	"tags": [],
	"description": "",
	"content": "Let’s bring up the Frontend Rails application!\nCopy/Paste the following commands into your Cloud9 workspace:\ncd ~/environment/ecsdemo-frontend  mu pipeline up   paste your personal GitHub token This will take 5 minutes  After the pipeline is built, monitor it\u0026rsquo;s progress:\nmu pipeline logs acceptance -f  "
},
{
	"uri": "https://ecsworkshop.com/platform/mu.html",
	"title": "Opinionated Tooling",
	"tags": [],
	"description": "",
	"content": "Opinionated tooling is designed to guide you down a path that is considered a \u0026ldquo;best practice\u0026rdquo;. Additionally, since \u0026ldquo;best practice\u0026rdquo; is the default, the amount of code we maintain is dramatically reduced. Rather than writing hundreds of lines of CloudFormation ourselves, we can start with a smart set of defaults, and just fill in a few blanks, and customize only the parts that we want changed.\nTo build both the Acceptance and Production platforms, the only code we maintain ourselves is found in mu.yml\n--- environments: - name: acceptance provider: ecs-fargate - name: production provider: ecs-fargate service: acceptance: disabled: true production: disabled: true extensions: - url: backend-service  In this file, we define that we want two environments, each using ECS Fargate. We disable any service deploys, since this repo is only used to build and maintain infrastructure.\nWe also include the extension backend-service. This is custom CloudFormation used to build a private DNS zone internal.service and private ALB for handling our backend api traffic.\nBecause we\u0026rsquo;re using Mu and it\u0026rsquo;s built-in best practice defaults, the amount of code we have to maintain remains simple.\n"
},
{
	"uri": "https://ecsworkshop.com/platform.html",
	"title": "Platform",
	"tags": [],
	"description": "",
	"content": " Build the Platform "
},
{
	"uri": "https://ecsworkshop.com/prerequisites/token.html",
	"title": "Create a GitHub token",
	"tags": [],
	"description": "",
	"content": " Go to https://github.com/settings/tokens/new  Type workshop in the token description Check admin:repo_hook Check repo Select generate token  Copy your token and save it somewhere convenient for later.  You\u0026rsquo;ll occasionally want to copy and paste it again.   "
},
{
	"uri": "https://ecsworkshop.com/frontend.html",
	"title": "Frontend Rails App",
	"tags": [],
	"description": "",
	"content": " Frontend Rails App "
},
{
	"uri": "https://ecsworkshop.com/nodejs.html",
	"title": "Node.js Backend API",
	"tags": [],
	"description": "",
	"content": " Node.js Backend API "
},
{
	"uri": "https://ecsworkshop.com/crystal/acceptance.html",
	"title": "Verify the Acceptance Deploy",
	"tags": [],
	"description": "",
	"content": "Once our Crystal Backend API is deployed to the Acceptance environment, we can verify that it\u0026rsquo;s running and available.\nTo find the URL of the acceptance environment, run this command:\nmu env show acceptance  Follow the Base URL link and confirm that your application now uses the Crystal backend api.\nCheck the running tasks in the Acceptance ECS Cluster\n"
},
{
	"uri": "https://ecsworkshop.com/frontend/acceptance.html",
	"title": "Verify the Acceptance Deploy",
	"tags": [],
	"description": "",
	"content": "Once our Frontend Rails application is deployed to the Acceptance environment, we can verify that it\u0026rsquo;s running and available.\nTo find the URL of the acceptance environment, run this command:\nmu env show acceptance  Follow the Base URL link and confirm that your application deployed successfully.\nCheck the running tasks in the Acceptance ECS Cluster\n"
},
{
	"uri": "https://ecsworkshop.com/nodejs/acceptance.html",
	"title": "Verify the Acceptance Deploy",
	"tags": [],
	"description": "",
	"content": "Once our Node.js Backend API is deployed to the Acceptance environment, we can verify that it\u0026rsquo;s running and available.\nTo find the URL of the acceptance environment, run this command:\nmu env show acceptance  Follow the Base URL link and confirm that your application now uses the Node.js backend api.\nCheck the running tasks in the Acceptance ECS Cluster\n"
},
{
	"uri": "https://ecsworkshop.com/crystal.html",
	"title": "Crystal Backend API",
	"tags": [],
	"description": "",
	"content": " Crystal Backend API "
},
{
	"uri": "https://ecsworkshop.com/prerequisites/software.html",
	"title": "Install and Configure Mu",
	"tags": [],
	"description": "",
	"content": "In the Cloud9 workspace, run the following commands:\ncurl -s https://getmu.io/install.sh | sudo sh  Since Fargate is currently only in us-east-1 we will adjust our environment\u0026rsquo;s default region:\nexport AWS_REGION=us-east-1  "
},
{
	"uri": "https://ecsworkshop.com/crystal/promote.html",
	"title": "Promote to Production",
	"tags": [],
	"description": "",
	"content": "When we\u0026rsquo;re happy that the acceptance environment is running our api, we can release this code to our Production environment.\nGo to CodePipeline and find the pipeline for your service mu-ecsdemo-crystal\nScroll down to Production and you should see a Manual approval step. Select Review, fill in a reason and select Approve\nThe same container that is deployed to Acceptance will now be deployed to Production\nCheck the running tasks in the Production ECS Cluster\nTo see the Production URL, run this command:\nmu env show production  When you see tasks running in the cluster, follow the Base URL link and confirm that your application now uses the backend API.\n"
},
{
	"uri": "https://ecsworkshop.com/frontend/promote.html",
	"title": "Promote to Production",
	"tags": [],
	"description": "",
	"content": "When we\u0026rsquo;re happy that the acceptance environment is running our service, we can release this code to our Production environment.\nGo to CodePipeline and find the pipeline for your service mu-ecsdemo-frontend\nScroll down to Production and you should see a Manual approval step. Select Review, fill in a reason and select Approve\nThe same container that is deployed to Acceptance will now be deployed to Production\nCheck the running tasks in the Production ECS Cluster\nTo see the Production URL, run this command:\nmu env show production  When you see tasks running in the cluster, follow the Base URL link and confirm that your application deployed successfully.\n"
},
{
	"uri": "https://ecsworkshop.com/nodejs/promote.html",
	"title": "Promote to Production",
	"tags": [],
	"description": "",
	"content": "When we\u0026rsquo;re happy that the acceptance environment is running our api, we can release this code to our Production environment.\nGo to CodePipeline and find the pipeline for your service mu-ecsdemo-nodejs\nScroll down to Production and you should see a Manual approval step. Select Review, fill in a reason and select Approve\nThe same container that is deployed to Acceptance will now be deployed to Production\nCheck the running tasks in the Production ECS Cluster\nTo see the Production URL, run this command:\nmu env show production  When you see tasks running in the cluster, follow the Base URL link and confirm that your application now uses the backend API.\n"
},
{
	"uri": "https://ecsworkshop.com/conclusion.html",
	"title": "Conclusion",
	"tags": [],
	"description": "",
	"content": " Conclusion "
},
{
	"uri": "https://ecsworkshop.com/prerequisites/fork.html",
	"title": "Fork the GitHub Repos",
	"tags": [],
	"description": "",
	"content": "Fork these GitHub repos to your own GitHub account:\n https://github.com/brentley/ecsdemo-platform/fork https://github.com/brentley/ecsdemo-frontend/fork https://github.com/brentley/ecsdemo-nodejs/fork https://github.com/brentley/ecsdemo-crystal/fork  "
},
{
	"uri": "https://ecsworkshop.com/cleanup.html",
	"title": "Cleanup",
	"tags": [],
	"description": "",
	"content": " Cleanup "
},
{
	"uri": "https://ecsworkshop.com/prerequisites/clone.html",
	"title": "Clone your Repos",
	"tags": [],
	"description": "",
	"content": "Clone your forked repos to your workspace: (replace your_username with your GitHub username)\nexport YOUR_GITHUB_NAME=your_username  cd ~/environment  git clone git@github.com:$YOUR_GITHUB_NAME/ecsdemo-platform.git   confirm the github key fingerprint  git clone git@github.com:$YOUR_GITHUB_NAME/ecsdemo-frontend.git git clone git@github.com:$YOUR_GITHUB_NAME/ecsdemo-nodejs.git git clone git@github.com:$YOUR GITHUB_NAME/ecsdemo-crystal.git  "
},
{
	"uri": "https://ecsworkshop.com/platform/environments.html",
	"title": "Acceptance and Production",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s bring up the Acceptance and Production environments!\nCopy/Paste the following commands into your Cloud9 workspace:\ncd ~/environment/ecsdemo-platform  mu env up acceptance \u0026amp;\u0026amp; mu env up production   Watch what is being built in CloudFormation This will probably take 15 minutes  Now lets bring up the CodePipeline for maintaining our infrastructure:\nmu pipeline up   paste your personal GitHub token This builds the CI/CD CodePipeline that will manage infrastructure code changes This will probably take 10 minutes  "
},
{
	"uri": "https://ecsworkshop.com/",
	"title": "Amazon ECS Workshop",
	"tags": [],
	"description": "",
	"content": " Amazon ECS Workshop for Fargate In this workshop, we will configure GitHub, CodePipeline, CodeBuild, VPC, ALB, ECS, Autoscaling, and Log aggregation using a framework called Mu\nWe will launch a frontend, and multiple backend services and will explore how you might adopt this workflow in your environment.\nTo get started, please ensure the prerequisites are met.\nThe Prerequisites take about 15 minutes to set up. Please start now, and we will begin the presentation after.\n "
},
{
	"uri": "https://ecsworkshop.com/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ecsworkshop.com/tags/",
	"title": "Index",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ecsworkshop.com/categories/search.html",
	"title": "Search",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ecsworkshop.com/search.html",
	"title": "Search Results",
	"tags": ["Index"],
	"description": "",
	"content": ""
},
{
	"uri": "https://ecsworkshop.com/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]